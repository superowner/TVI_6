using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using FbxSharp;
using System.Runtime.InteropServices;
using OpenTK;
using OpenTK.Graphics.OpenGL;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;

namespace FBXCube
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        Matrix4 cam;

        int shader;
        int vertex_shader;
        int fragment_shader;

        float distance = 5.0f;

        float rotx, roty;
        float camy;

        Point m;
        string vertex_shader_src = @"
attribute vec3 vertex;
attribute vec2 tex_coord;
attribute vec4 bone_indices;
attribute vec4 bone_weights;
//attribute vec3 normal;

uniform mat4 modelview;
uniform mat4 projection;

uniform mat4 bones[100];

varying vec2 tc;

void main() {
//  vec4 vert = vec4(vertex, 1.0);

  vec4 vert;

  int index = int(bone_indices.x);
  vert = bone_weights.x*(bones[index]*vec4(vertex, 1.0));
  index = int(bone_indices.y);
  if (index >= 0)
    vert += bone_weights.y*(bones[index]*vec4(vertex, 1.0));
  index = int(bone_indices.z);
  if (index >= 0)
    vert += bone_weights.z*(bones[index]*vec4(vertex, 1.0));
  index = int(bone_indices.w);
  if (index >= 0)
    vert += bone_weights.w*(bones[index]*vec4(vertex, 1.0));

  gl_Position = projection*modelview*vert;
  tc = tex_coord;
}
";

        string fragment_shader_src = @"
varying vec2 tc;
uniform sampler2D tex;

void main() {
  vec4 c = texture2D(tex, tc);
  if (c.a < 0.95)
    discard;
  else
    gl_FragColor = c;
}
";

        Model girl;
        Bvh skeleton;
        Dictionary<string, string> bone_dict = new Dictionary<string, string>();

        private void Form1_Load(object sender, EventArgs e)
        {
            GL.ClearColor(0.0f, 0.5f, 1.0f, 1.0f);
            float aspect = (float)glControl.Width / (float)glControl.Height;
            cam = Matrix4.CreatePerspectiveFieldOfView((float)(90 / aspect / 180 * Math.PI), aspect, 1.0f, 1000.0f);
            GL.Enable(EnableCap.DepthTest);
            GL.Enable(EnableCap.Texture2D);

            girl = Model.FromFile("bianca_1.fbx");

            Textures.Load();
            girl.Buffer();

            //Skeleton skel = Skeleton.FromFile("05.asf");
            skeleton = new Bvh("01_01.bvh");

            animationTrackBar.Maximum = skeleton.framesNum-1;

            shader = GL.CreateProgram();
            vertex_shader = GL.CreateShader(ShaderType.VertexShader);
            fragment_shader = GL.CreateShader(ShaderType.FragmentShader);

            string result;
            logTextBox.AppendText(GL.GetString(StringName.ShadingLanguageVersion) + "\r\n");

            GL.ShaderSource(vertex_shader, vertex_shader_src);
            GL.CompileShader(vertex_shader);
            result = GL.GetShaderInfoLog(vertex_shader);
            logTextBox.AppendText(result);


            GL.ShaderSource(fragment_shader, fragment_shader_src);
            GL.CompileShader(fragment_shader);
            result = GL.GetShaderInfoLog(fragment_shader);
            logTextBox.AppendText(result);

            GL.AttachShader(shader, vertex_shader);
            GL.AttachShader(shader, fragment_shader);

            GL.BindAttribLocation(shader, 0, "vertex");
            GL.BindAttribLocation(shader, 1, "tex_coord");
            GL.BindAttribLocation(shader, 2, "bone_indices");
            GL.BindAttribLocation(shader, 3, "bone_weights");

            GL.LinkProgram(shader);
            result = GL.GetProgramInfoLog(shader);
            logTextBox.AppendText(result);

            int LinkRes = 0;
            GL.GetProgram(shader, GetProgramParameterName.LinkStatus, out LinkRes);
            if (LinkRes != 1)
                return;

       /*     bone_dict.Add("Model::Hips", "Hips");
            bone_dict.Add("Model::LHipJoint", "LHipJoint");
            bone_dict.Add("Model::RHipJoint", "RHipJoint");
            bone_dict.Add("Model::LeftUpLeg", "LeftHip");
            bone_dict.Add("Model::RightUpLeg", "RightHip");

            bone_dict.Add("Model::LeftLeg", "LeftKnee");
            bone_dict.Add("Model::RightLeg", "RightKnee");
            bone_dict.Add("Model::LeftFoot", "LeftAnkle");
            bone_dict.Add("Model::RightFoot", "RightAnkle");
            bone_dict.Add("Model::LeftToeBase", "LeftToe");
            bone_dict.Add("Model::RightToeBase", "RightToe");

            bone_dict.Add("Model::LowerBack", "lowerback");
            bone_dict.Add("Model::Spine", "Chest");
            bone_dict.Add("Model::Spine1", "Chest2");

            bone_dict.Add("Model::LeftShoulder", "LeftCollar");
            bone_dict.Add("Model::RightShoulder", "RightCollar");*/




            /*            bone_dict.Add("Model::pelvis", "Hips");
                        //bone_dict.Add("Model::LHipJoint", "LHipJoint");
                        //bone_dict.Add("Model::RHipJoint", "RHipJoint");
                        bone_dict.Add("Model::thigh_l", "LeftKnee");
                        bone_dict.Add("Model::thigh_r", "RightKnee");
                        bone_dict.Add("Model::calf_l", "LeftAnkle");
                        bone_dict.Add("Model::calf_r", "RightAnkle");
                        bone_dict.Add("Model::foot_l", "LeftToe");
                        bone_dict.Add("Model::foot_r", "RightToe");*/

            GL.UseProgram(shader);
            //            GL.Enable(EnableCap.CullFace);
           // ApplyAnimation(0);
            timer1.Enabled = true;
        }

        private void glControl_Resize(object sender, EventArgs e)
        {
            float aspect = (float)glControl.Width / (float)glControl.Height;
            cam = Matrix4.CreatePerspectiveFieldOfView((float)(90 / aspect / 180 * Math.PI), aspect, 0.1f, 1000.0f);
            GL.Viewport(0, 0, glControl.Width, glControl.Height);
        }

        private void glControl_MouseWheel(object Sender, MouseEventArgs e)
        {
            if (e.Delta < 0)
                distance *= 1.2f;
            else if (e.Delta > 0)
                distance /= 1.2f;
        }

        private void glControl_MouseDown(object sender, MouseEventArgs e)
        {
            m = new Point(e.X, e.Y);
        }

        private void glControl_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Right)
            {
                rotx += (e.X - m.X) / 2.0f;
                roty += (e.Y - m.Y) / 2.0f;
            }
            if (e.Button == MouseButtons.Left)
            {
                camy += (e.Y - m.Y) / 100.0f;
                if (camy < 0.0f) camy = 0.0f;
                if (camy > 2.0f) camy = 2.0f;
            }
            m.X = e.X;
            m.Y = e.Y;
        }

        private void ApplyAnimation(int frame)
        {
            for (int i = 0; i < girl.GetBonesCount(); i++)
            {
                Model.Bone bone = girl.GetBone(i);
                string anim_bone_name;
                if (bone.name != "")
                    if (bone_dict.TryGetValue(bone.name, out anim_bone_name))
                    {
                        BvhPart animation_bone = skeleton.BvhPartsLinear.Find(abone => abone.name == anim_bone_name);
                        if (animation_bone != null)
                        {
                            bone.ResetTransform();
                            bone.ApplyTransform(animation_bone.motion[frame]);
                        }
                    }
            }
        }

        private void animationTrackBar_ValueChanged(object sender, EventArgs e)
        {
            frameLabel.Text = String.Format("frame:\n{0}/{1}", animationTrackBar.Value, animationTrackBar.Maximum);

            ApplyAnimation(animationTrackBar.Value);

            /*            Model.Bone root = girl.GetBone(0);
                        root.ResetTransform();
                        root.ApplyTransform(skeleton.root.motion[animationTrackBar.Value]);*/

            //            root.ApplyTransform(Matrix4.CreateTranslation(0.0f, 0.0f, animationTrackBar.Value*0.1f));
        }

        private void boneTrackBar_ValueChanged(object sender, EventArgs e)
        {
       /*     for (int i = 0; i < girl.GetBonesCount(); i++)
            {
                Model.Bone bone = girl.GetBone(i);
                if (bone.name == "Model::neck_01" || bone.name == "Model::Neck1")
                {
                    bone.ResetTransform();
                    bone.ApplyTransform(Matrix4.CreateRotationY((float)(boneTrackBar2.Value * Math.PI / 180.0)));
                }
            }*/
        }

        private void boneTrackBar3_Scroll(object sender, EventArgs e)
        {
    /*        for (int i = 0; i < girl.GetBonesCount(); i++)
            {
                Model.Bone bone = girl.GetBone(i);
                if (bone.name == "Model::LowerBack")
                {
                    bone.ResetTransform();
                    bone.ApplyTransform(Matrix4.CreateRotationY((float)(boneTrackBar3.Value * Math.PI / 180.0)));
                }
            }*/
        }

        private void boneTrackBar1_ValueChanged(object sender, EventArgs e)
        {
    /*        for (int i = 0; i < girl.GetBonesCount(); i++)
            {
                Model.Bone bone = girl.GetBone(i);
                if (bone.name == "Model::Neck")
                {
                    bone.ResetTransform();
                    bone.ApplyTransform(Matrix4.CreateRotationX((float)(boneTrackBar1.Value * Math.PI / 180.0)));
                }
            }*/

        }

        private void RenderFrame(object sender, EventArgs e)
        {
            GL.Clear(ClearBufferMask.DepthBufferBit | ClearBufferMask.ColorBufferBit);
//            i++;

            Matrix4 projection = cam;
            Matrix4 real_cam = Matrix4.Identity;
            real_cam = Matrix4.CreateTranslation(0.0f, 0.0f, -distance) * real_cam;
            real_cam = Matrix4.CreateRotationX((float)(roty / 180 * Math.PI)) * real_cam;
            real_cam = Matrix4.CreateRotationY((float)(rotx / 180 * Math.PI)) * real_cam;
            real_cam = Matrix4.CreateTranslation(0.0f, -camy, 0.0f) * real_cam;
            Matrix4 light_mat = real_cam;

            Matrix3 normalMatrix = new Matrix3(real_cam);
            normalMatrix.Invert();
            normalMatrix.Transpose();

            GL.UseProgram(shader);
            GL.UniformMatrix4(GL.GetUniformLocation(shader, "modelview"), false, ref real_cam);
            GL.UniformMatrix4(GL.GetUniformLocation(shader, "projection"), false, ref projection);
//            GL.UniformMatrix3(GL.GetUniformLocation(shader, "normal_matrix"), false, ref normalMatrix);

            GL.ActiveTexture(TextureUnit.Texture0);
            GL.Uniform1(GL.GetUniformLocation(shader, "tex"), 0);

            int bones_uniform = GL.GetUniformLocation(shader, "bones");
            if (bones_uniform >= 0)
            {
                Matrix4[] bones = girl.GetBoneTransforms();
                float[] bones_data = new float[bones.Length * 16];
                for (int i = 0; i < bones.Length; i++)
                {
                    bones_data[i * 16 + 0] = bones[i].M11;
                    bones_data[i * 16 + 1] = bones[i].M12;
                    bones_data[i * 16 + 2] = bones[i].M13;
                    bones_data[i * 16 + 3] = bones[i].M14;

                    bones_data[i * 16 + 4] = bones[i].M21;
                    bones_data[i * 16 + 5] = bones[i].M22;
                    bones_data[i * 16 + 6] = bones[i].M23;
                    bones_data[i * 16 + 7] = bones[i].M24;

                    bones_data[i * 16 + 8] = bones[i].M31;
                    bones_data[i * 16 + 9] = bones[i].M32;
                    bones_data[i * 16 + 10] = bones[i].M33;
                    bones_data[i * 16 + 11] = bones[i].M34;

                    bones_data[i * 16 + 12] = bones[i].M41;
                    bones_data[i * 16 + 13] = bones[i].M42;
                    bones_data[i * 16 + 14] = bones[i].M43;
                    bones_data[i * 16 + 15] = bones[i].M44;
                }

                GL.UniformMatrix4(bones_uniform, bones_data.Length, false, bones_data);
            }

//            GL.Enable(EnableCap.Blend);
//            GL.BlendFunc(BlendingFactorSrc.SrcAlpha, BlendingFactorDest.OneMinusSrcAlpha);
            girl.Render();

            GL.Disable(EnableCap.Blend);
            GL.BindTexture(TextureTarget.Texture2D, 0);
            GL.UseProgram(0);

            glControl.SwapBuffers();
        }
    }
}
